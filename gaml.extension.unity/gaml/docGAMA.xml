<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<doc>
    <constantsCategories/>
    <conceptList>
        <concept id="action"/>
        <concept id="agent_location"/>
        <concept id="agent_movement"/>
        <concept id="algorithm"/>
        <concept id="architecture"/>
        <concept id="arithmetic"/>
        <concept id="asc"/>
        <concept id="attribute"/>
        <concept id="autosave"/>
        <concept id="background"/>
        <concept id="batch"/>
        <concept id="bdi"/>
        <concept id="behavior"/>
        <concept id="camera"/>
        <concept id="cast"/>
        <concept id="chart"/>
        <concept id="clustering"/>
        <concept id="color"/>
        <concept id="comodel"/>
        <concept id="comparison"/>
        <concept id="communication"/>
        <concept id="condition"/>
        <concept id="constant"/>
        <concept id="container"/>
        <concept id="csv"/>
        <concept id="cycle"/>
        <concept id="date"/>
        <concept id="database"/>
        <concept id="dem"/>
        <concept id="dgs"/>
        <concept id="diffusion"/>
        <concept id="dimension"/>
        <concept id="display"/>
        <concept id="distribution"/>
        <concept id="dxf"/>
        <concept id="edge"/>
        <concept id="elevation"/>
        <concept id="enumeration"/>
        <concept id="equation"/>
        <concept id="experiment"/>
        <concept id="facet"/>
        <concept id="file"/>
        <concept id="filter"/>
        <concept id="fipa"/>
        <concept id="fsm"/>
        <concept id="geometry"/>
        <concept id="gis"/>
        <concept id="global"/>
        <concept id="graph"/>
        <concept id="graph_weight"/>
        <concept id="gml"/>
        <concept id="grid"/>
        <concept id="graphic"/>
        <concept id="graphic_unit"/>
        <concept id="gui"/>
        <concept id="halt"/>
        <concept id="headless"/>
        <concept id="hydrology"/>
        <concept id="image"/>
        <concept id="import"/>
        <concept id="inheritance"/>
        <concept id="init"/>
        <concept id="inspector"/>
        <concept id="layer"/>
        <concept id="length_unit"/>
        <concept id="light"/>
        <concept id="list"/>
        <concept id="load_file"/>
        <concept id="logical"/>
        <concept id="loop"/>
        <concept id="matrix"/>
        <concept id="math"/>
        <concept id="map"/>
        <concept id="mirror"/>
        <concept id="model"/>
        <concept id="monitor"/>
        <concept id="multi_level"/>
        <concept id="multi_criteria"/>
        <concept id="multi_simulation"/>
        <concept id="neighbors"/>
        <concept id="network"/>
        <concept id="nil"/>
        <concept id="node"/>
        <concept id="obj"/>
        <concept id="obstacle"/>
        <concept id="opengl"/>
        <concept id="operator"/>
        <concept id="optimization"/>
        <concept id="osm"/>
        <concept id="output"/>
        <concept id="overlay"/>
        <concept id="parameter"/>
        <concept id="pause"/>
        <concept id="permanent"/>
        <concept id="physics_engine"/>
        <concept id="point"/>
        <concept id="probability"/>
        <concept id="pseudo_variable"/>
        <concept id="r"/>
        <concept id="random"/>
        <concept id="random_operator"/>
        <concept id="raster"/>
        <concept id="regression"/>
        <concept id="reflex"/>
        <concept id="refresh"/>
        <concept id="save_file"/>
        <concept id="scheduler"/>
        <concept id="serialize"/>
        <concept id="shape"/>
        <concept id="shapefile"/>
        <concept id="shortest_path"/>
        <concept id="skill"/>
        <concept id="sound"/>
        <concept id="spatial_computation"/>
        <concept id="spatial_relation"/>
        <concept id="spatial_transformation"/>
        <concept id="species"/>
        <concept id="sport"/>
        <concept id="statistic"/>
        <concept id="string"/>
        <concept id="surface_unit"/>
        <concept id="svg"/>
        <concept id="system"/>
        <concept id="task_based"/>
        <concept id="ternary"/>
        <concept id="text"/>
        <concept id="texture"/>
        <concept id="test"/>
        <concept id="3d"/>
        <concept id="tif"/>
        <concept id="time"/>
        <concept id="time_unit"/>
        <concept id="topology"/>
        <concept id="torus"/>
        <concept id="transport"/>
        <concept id="txt"/>
        <concept id="type"/>
        <concept id="update"/>
        <concept id="volume_unit"/>
        <concept id="weight_unit"/>
        <concept id="write"/>
        <concept id="xml"/>
        <concept id="world"/>
    </conceptList>
    <constants/>
    <operatorsCategories>
        <category id="Iterator operators"/>
        <category id="Unity"/>
    </operatorsCategories>
    <operators>
        <operator alphabetOrder="nr" id="prefab_aspect" name="prefab_aspect">
            <operatorCategories>
                <category id="Unity"/>
            </operatorCategories>
            <concepts>
                <concept id="Unity"/>
            </concepts>
            <combinaisonIO>
                <operands class="gaml/extension/unity/operators/Operators.java" contentType="-13" returnType="gaml.extension.unity.types.UnityAspect" type="-13">
                    <operand name="prefabPath" position="0" type="string"/>
                    <operand name="size" position="1" type="float"/>
                    <operand name="yOffset" position="2" type="float"/>
                    <operand name="rotationCoeff" position="3" type="float"/>
                    <operand name="rotationOffset" position="4" type="float"/>
                    <operand name="precision" position="5" type="int"/>
                </operands>
            </combinaisonIO>
            <documentation>
                <result masterDoc="true">creates a new unity prefab aspect for Unity with the given properties: path of the prefab, size, y-offset, rotation coeff, rotation offset</result>
                <returns masterDoc="true"/>
                <usagesExamples>
                    <usage>
                        <examples>
                            <example code="prefab_aspect(&quot;Prefabs/Car&quot;,1.0,0.5,1.0,90.0)" isExecutable="false" isTestOnly="false" test="false" type="gaml.extension.unity.types.UnityAspect"/>
                        </examples>
                    </usage>
                </usagesExamples>
            </documentation>
        </operator>
        <operator alphabetOrder="dh" id="geometry_aspect" name="geometry_aspect">
            <operatorCategories>
                <category id="Unity"/>
            </operatorCategories>
            <concepts>
                <concept id="Unity"/>
            </concepts>
            <combinaisonIO>
                <operands class="gaml/extension/unity/operators/Operators.java" contentType="-13" returnType="gaml.extension.unity.types.UnityAspect" type="-13">
                    <operand name="height" position="0" type="float"/>
                    <operand name="color" position="1" type="rgb"/>
                    <operand name="precision" position="2" type="int"/>
                </operands>
            </combinaisonIO>
            <documentation>
                <result masterDoc="true">creates a new unity geometry aspect for Unity with the given properties: geometry to display, height, color</result>
                <returns masterDoc="true"/>
                <usagesExamples>
                    <usage>
                        <examples>
                            <example code="geometry_aspect(10.0, #red)" isExecutable="false" isTestOnly="false" test="false" type="gaml.extension.unity.types.UnityAspect"/>
                        </examples>
                    </usage>
                </usagesExamples>
            </documentation>
        </operator>
        <operator alphabetOrder="dh" id="geometry_properties" name="geometry_properties">
            <operatorCategories>
                <category id="Unity"/>
            </operatorCategories>
            <concepts>
                <concept id="Unity"/>
            </concepts>
            <combinaisonIO>
                <operands class="gaml/extension/unity/operators/Operators.java" contentType="-13" returnType="gaml.extension.unity.types.UnityProperties" type="-13">
                    <operand name="name" position="0" type="string"/>
                    <operand name="aspect" position="1" type="gaml.extension.unity.types.UnityAspect"/>
                    <operand name="tag" position="2" type="string"/>
                    <operand name="collider" position="3" type="bool"/>
                    <operand name="interactable" position="4" type="bool"/>
                    <operand name="grabable" position="5" type="bool"/>
                </operands>
            </combinaisonIO>
            <documentation>
                <result masterDoc="true">creates a new geometry to send to unity with the given properties: name, aspect, tag, layer name, has a collider, is interactable, is grabable, is static, frequency of sending to unity</result>
                <returns masterDoc="true"/>
                <usagesExamples>
                    <usage>
                        <examples>
                            <example code="geometry_properties(&quot;car&quot;,car_prefab, &quot;car&quot;, true,true, false )" isExecutable="false" isTestOnly="false" test="false" type="gaml.extension.unity.types.UnityProperties"/>
                        </examples>
                    </usage>
                </usagesExamples>
            </documentation>
        </operator>
        <operator alphabetOrder="sz" id="unity_property" name="unity_property">
            <operatorCategories>
                <category id="Types-related operators"/>
            </operatorCategories>
            <concepts>
                <concept id="type"/>
                <concept id="Unity"/>
            </concepts>
            <combinaisonIO>
                <operands class="gaml.extension.unity.types.UnityPropertiesType" contentType="" returnType="unity_property" type="">
                    <operand name="val" position="0" type="any"/>
                </operands>
            </combinaisonIO>
            <documentation>
                <result>casts the operand in a unity_property object.</result>
            </documentation>
            <documentation>
                <result>cast an object into a unity_properties if it is an instance of a unity_properties</result>
                <returns/>
            </documentation>
        </operator>
    </operators>
    <skills/>
    <architectures/>
    <speciess>
        <species id="abstract_unity_linker" name="abstract_unity_linker">
            <actions>
                <action name="send_message" returnType="void">
                    <args>
                        <arg name="players" optional="true" type="list">
                            <documentation>
                                <result>Players to send the geometries to</result>
                                <returns/>
                            </documentation>
                        </arg>
                        <arg name="mes" optional="true" type="map">
                            <documentation>
                                <result>Map to send</result>
                                <returns/>
                            </documentation>
                        </arg>
                    </args>
                    <documentation>
                        <result>send a message to the Unity Client</result>
                        <returns/>
                    </documentation>
                </action>
                <action name="send_world" returnType="void">
                    <args/>
                    <documentation>
                        <result>send the current state of the world to the Unity clients</result>
                        <returns/>
                    </documentation>
                </action>
                <action name="send_geometries" returnType="void">
                    <args>
                        <arg name="player" optional="true" type="agent">
                            <documentation>
                                <result>Player to which the message will be sent</result>
                                <returns/>
                            </documentation>
                        </arg>
                        <arg name="update_position" optional="true" type="boolean">
                            <documentation>
                                <result>Has the player to be sent to Unity?</result>
                                <returns/>
                            </documentation>
                        </arg>
                        <arg name="geoms" optional="true" type="map">
                            <documentation>
                                <result>Map of geometry to send (geometry::unity_property)</result>
                                <returns/>
                            </documentation>
                        </arg>
                    </args>
                    <documentation>
                        <result>send the background geometries to the Unity client</result>
                        <returns/>
                    </documentation>
                </action>
                <action name="message_geometry_shape" returnType="map">
                    <args>
                        <arg name="geom" optional="true" type="geometry">
                            <documentation>
                                <result>Geometry to send to Unity</result>
                                <returns/>
                            </documentation>
                        </arg>
                    </args>
                    <documentation>
                        <result>Action called by the send_world action that returns the message to send to Unity</result>
                        <returns/>
                    </documentation>
                </action>
                <action name="message_geometry_loc" returnType="map">
                    <args>
                        <arg name="geom" optional="true" type="geometry">
                            <documentation>
                                <result>Geometry to send to Unity</result>
                                <returns/>
                            </documentation>
                        </arg>
                    </args>
                    <documentation>
                        <result>Action called by the send_world action that returns the message to send to Unity</result>
                        <returns/>
                    </documentation>
                </action>
                <action name="send_init_data" returnType="void">
                    <args>
                        <arg name="id" optional="true" type="string">
                            <documentation>
                                <result>if of the player to send the geometries to</result>
                                <returns/>
                            </documentation>
                        </arg>
                    </args>
                    <documentation>
                        <result>Wait for the connection of a unity client and send the paramters to the client</result>
                        <returns/>
                    </documentation>
                </action>
                <action name="after_sending_world" returnType="void">
                    <args>
                        <arg name="map_to_send" optional="true" type="map">
                            <documentation>
                                <result>data already sent to the client</result>
                                <returns/>
                            </documentation>
                        </arg>
                    </args>
                    <documentation>
                        <result>Action trigger just after sending the world to Unity </result>
                        <returns/>
                    </documentation>
                </action>
                <action name="after_sending_geometries" returnType="void">
                    <args>
                        <arg name="player" optional="true" type="agent">
                            <documentation>
                                <result>Player to which the message will be sent</result>
                                <returns/>
                            </documentation>
                        </arg>
                    </args>
                    <documentation>
                        <result>Action trigger just after sending the background geometries to a Unity client </result>
                        <returns/>
                    </documentation>
                </action>
                <action name="create_init_player" returnType="void">
                    <args>
                        <arg name="id" optional="true" type="string">
                            <documentation>
                                <result>name of the player agent</result>
                                <returns/>
                            </documentation>
                        </arg>
                    </args>
                    <documentation>
                        <result>Create and init a new unity player agent</result>
                        <returns/>
                    </documentation>
                </action>
                <action name="create_player" returnType="void">
                    <args>
                        <arg name="id" optional="true" type="string">
                            <documentation>
                                <result>name of the player agent</result>
                                <returns/>
                            </documentation>
                        </arg>
                    </args>
                    <documentation>
                        <result>Create a new unity player agent</result>
                        <returns/>
                    </documentation>
                </action>
                <action name="filter_distance" returnType="list&lt;geometry&gt;">
                    <args>
                        <arg name="geometries" optional="true" type="list">
                            <documentation>
                                <result>list of geometries to filter</result>
                                <returns/>
                            </documentation>
                        </arg>
                        <arg name="player" optional="true" type="agent">
                            <documentation>
                                <result>the player agent</result>
                                <returns/>
                            </documentation>
                        </arg>
                    </args>
                    <documentation>
                        <result>Action called by the send_world action that returns the sub-list of geometries to send to Unity from a given list of geometries according to a max distance to the player</result>
                        <returns/>
                    </documentation>
                </action>
                <action name="filter_overlapping" returnType="list&lt;geometry&gt;">
                    <args>
                        <arg name="geometries" optional="true" type="list">
                            <documentation>
                                <result>list of geometries to filter</result>
                                <returns/>
                            </documentation>
                        </arg>
                        <arg name="player" optional="true" type="agent">
                            <documentation>
                                <result>the player agent</result>
                                <returns/>
                            </documentation>
                        </arg>
                    </args>
                    <documentation>
                        <result>Action called by the send_world action that returns the sub-list of geometries to send to Unity from a given list of geometries according to a min proximity to the other geometries to send</result>
                        <returns/>
                    </documentation>
                </action>
                <action name="new_player_location" returnType="point">
                    <args>
                        <arg name="loc" optional="true" type="point">
                            <documentation>
                                <result>Location of the player agent</result>
                                <returns/>
                            </documentation>
                        </arg>
                        <arg name="player" optional="true" type="agent">
                            <documentation>
                                <result>the player agent</result>
                                <returns/>
                            </documentation>
                        </arg>
                    </args>
                    <documentation>
                        <result>Action called by the move_player action that returns the location to send to Unity from a given player location</result>
                        <returns/>
                    </documentation>
                </action>
                <action name="move_player" returnType="void">
                    <args>
                        <arg name="player" optional="true" type="agent">
                            <documentation>
                                <result>the player agent to move</result>
                                <returns/>
                            </documentation>
                        </arg>
                        <arg name="loc" optional="true" type="point">
                            <documentation>
                                <result>Location of the player agent</result>
                                <returns/>
                            </documentation>
                        </arg>
                    </args>
                    <documentation>
                        <result>move the player agent</result>
                        <returns/>
                    </documentation>
                </action>
                <action name="move_player_external" returnType="void">
                    <args>
                        <arg name="id" optional="true" type="string">
                            <documentation>
                                <result>id of the player agent to move</result>
                                <returns/>
                            </documentation>
                        </arg>
                        <arg name="x" optional="true" type="int">
                            <documentation>
                                <result>x Location of the player agent</result>
                                <returns/>
                            </documentation>
                        </arg>
                        <arg name="y" optional="true" type="int">
                            <documentation>
                                <result>y Location of the player agent</result>
                                <returns/>
                            </documentation>
                        </arg>
                        <arg name="z" optional="true" type="int">
                            <documentation>
                                <result>z Location of the player agent</result>
                                <returns/>
                            </documentation>
                        </arg>
                        <arg name="angle" optional="true" type="int">
                            <documentation>
                                <result>angle of the player agent</result>
                                <returns/>
                            </documentation>
                        </arg>
                    </args>
                    <documentation>
                        <result>move the player agent </result>
                        <returns/>
                    </documentation>
                </action>
                <action name="ping_GAMA" returnType="void">
                    <args>
                        <arg name="id" optional="true" type="string">
                            <documentation>
                                <result>Player agent that try to ping GAMA</result>
                                <returns/>
                            </documentation>
                        </arg>
                    </args>
                    <documentation>
                        <result>Ping GAMA to test the connection</result>
                        <returns/>
                    </documentation>
                </action>
                <action name="player_position_updated" returnType="void">
                    <args>
                        <arg name="id" optional="true" type="string">
                            <documentation>
                                <result>Player agent of which the position has been updated</result>
                                <returns/>
                            </documentation>
                        </arg>
                    </args>
                    <documentation>
                        <result>reactivate the reception of player position</result>
                        <returns/>
                    </documentation>
                </action>
                <action name="send_player_position" returnType="void">
                    <args>
                        <arg name="player" optional="true" type="agent">
                            <documentation>
                                <result>Player agent of which to send the position</result>
                                <returns/>
                            </documentation>
                        </arg>
                    </args>
                    <documentation>
                        <result>send the new position of the player to Unity (used to teleport the player from GAMA) </result>
                        <returns/>
                    </documentation>
                </action>
                <action name="add_to_send_parameter" returnType="void">
                    <args>
                        <arg name="map_to_send" optional="true" type="map">
                            <documentation>
                                <result>data already sent to the client</result>
                                <returns/>
                            </documentation>
                        </arg>
                    </args>
                    <documentation>
                        <result>add values to the parameters sent to the Unity Client</result>
                        <returns/>
                    </documentation>
                </action>
                <action name="send_parameters" returnType="void">
                    <args>
                        <arg name="player" optional="true" type="agent">
                            <documentation>
                                <result>Player to which the message will be sent</result>
                                <returns/>
                            </documentation>
                        </arg>
                    </args>
                    <documentation>
                        <result>Send the parameter to Unity to intialized the connection</result>
                        <returns/>
                    </documentation>
                </action>
                <action name="send_unity_propetries" returnType="void">
                    <args>
                        <arg name="player" optional="true" type="agent">
                            <documentation>
                                <result>Player to which the message will be sent</result>
                                <returns/>
                            </documentation>
                        </arg>
                    </args>
                    <documentation>
                        <result>Send the Unity properties to intialize the possible properties of geometries</result>
                        <returns/>
                    </documentation>
                </action>
                <action name="loc_to_send" returnType="point">
                    <args/>
                    <documentation>
                        <result/>
                        <returns>the location to send to Unity</returns>
                    </documentation>
                </action>
                <action name="add_to_map" returnType="void">
                    <args>
                        <arg name="map" optional="true" type="map">
                            <documentation>
                                <result>map of data to send to Unity</result>
                                <returns/>
                            </documentation>
                        </arg>
                        <arg name="geom" optional="true" type="geometry">
                            <documentation>
                                <result>Geometry to send to Unity</result>
                                <returns/>
                            </documentation>
                        </arg>
                    </args>
                    <documentation>
                        <result/>
                        <returns>other elements than the location to add to the data sent to Unity</returns>
                    </documentation>
                </action>
            </actions>
            <attached_skills>
                <attached_skill name="network"/>
            </attached_skills>
            <vars>
                <var constant="false" depends_on="" name="connect_to_unity" type="boolean">
                    <documentation>
                        <result>Activate the unity connection; if activated, the model will wait for an connection from Unity to start</result>
                        <returns/>
                    </documentation>
                </var>
                <var constant="false" depends_on="" name="ready_to_move_player" type="list">
                    <documentation>
                        <result>list of players that are readdy to have their position updated from Unity</result>
                        <returns/>
                    </documentation>
                </var>
                <var constant="false" depends_on="" name="min_num_players" type="int">
                    <documentation>
                        <result>Number of Unity players required to start the simulation</result>
                        <returns/>
                    </documentation>
                </var>
                <var constant="false" depends_on="" name="max_num_players" type="int">
                    <documentation>
                        <result>Maximal number of Unity players</result>
                        <returns/>
                    </documentation>
                </var>
                <var constant="false" depends_on="" name="precision" type="int">
                    <documentation>
                        <result>Number of decimal for the data (location, rotation)</result>
                        <returns/>
                    </documentation>
                </var>
                <var constant="false" depends_on="" name="unity_properties" type="list">
                    <documentation>
                        <result>List of background geometries to sent to Unity.</result>
                        <returns/>
                    </documentation>
                </var>
                <var constant="false" depends_on="" name="background_geometries" type="map">
                    <documentation>
                        <result>Map of background geometries to sent to Unity with the unity properties to use.</result>
                        <returns/>
                    </documentation>
                </var>
                <var constant="false" depends_on="" name="geometries_to_send" type="map">
                    <documentation>
                        <result>List of geometries to sent to Unity with the unity properties to use. It could be updated each simulation step</result>
                        <returns/>
                    </documentation>
                </var>
                <var constant="false" depends_on="" name="do_send_world" type="boolean">
                    <documentation>
                        <result>Has the agents has to be sent to unity?</result>
                        <returns/>
                    </documentation>
                </var>
                <var constant="false" depends_on="" name="initialized" type="boolean">
                    <documentation>
                        <result>Has the world being initialized yet?</result>
                        <returns/>
                    </documentation>
                </var>
                <var constant="false" depends_on="" name="player_species" type="string">
                    <documentation>
                        <result>Species of the player agent</result>
                        <returns/>
                    </documentation>
                </var>
                <var constant="false" depends_on="" name="end_message_symbol" type="string">
                    <documentation>
                        <result>Symbol to be added at the end of the messages (only when the middleware is not used); it should be the same defined in Unity</result>
                        <returns/>
                    </documentation>
                </var>
                <var constant="false" depends_on="" name="receive_information" type="boolean">
                    <documentation>
                        <result>should GAMA receive information from Unity?</result>
                        <returns/>
                    </documentation>
                </var>
                <var constant="false" depends_on="" name="move_player_event" type="boolean">
                    <documentation>
                        <result>Does the player agent moved from GAMA?</result>
                        <returns/>
                    </documentation>
                </var>
                <var constant="false" depends_on="" name="move_player_from_unity" type="boolean">
                    <documentation>
                        <result>Has the player to move in GAMA as it moves in Unity?</result>
                        <returns/>
                    </documentation>
                </var>
                <var constant="false" depends_on="" name="use_middleware" type="boolean">
                    <documentation>
                        <result>Use of the middleware to connect Unity and GAMA? Direct connection is only usable for 1 player game</result>
                        <returns/>
                    </documentation>
                </var>
                <var constant="false" depends_on="" name="new_player_position" type="map">
                    <documentation>
                        <result>The new poistion of the player to be sent to Unity - map with key: agent name, value: list of int [x,y]</result>
                        <returns/>
                    </documentation>
                </var>
                <var constant="false" depends_on="" name="distance_player_selection" type="float">
                    <documentation>
                        <result>Maximal distance to select a player agent</result>
                        <returns/>
                    </documentation>
                </var>
                <var constant="false" depends_on="" name="init_locations" type="list">
                    <documentation>
                        <result>Init locations of the player agents in the environment - this information will be sent to Unity to move the players accordingly</result>
                        <returns/>
                    </documentation>
                </var>
                <var constant="false" depends_on="" name="player_agents" type="map">
                    <documentation>
                        <result>Player agents indexes by their name</result>
                        <returns/>
                    </documentation>
                </var>
            </vars>
            <concepts/>
        </species>
    </speciess>
    <insideStatementKinds/>
    <insideStatementSymbols/>
    <statementsKinds/>
    <statements/>
    <files/>
    <types>
        <type id="28463575" kind="104" name="unity_property">
            <concepts>
                <concept id="type"/>
                <concept id="Unity"/>
            </concepts>
        </type>
    </types>
</doc>
